第一天
    整体介绍
        1.thymeleaf前端框架,相当于jsp
        2.redis相对于其它缓存,可以保持数据不丢
        3.jsr303后端数据校验框架
        4.秒杀 = 分布式session + 商品列表 + 商品详情 + 订单详情 + 系统压测 + 缓存优化 + 消息队列 + 接口安全
        5.写缓存,写数据库,谁优谁后?
        6.springmvc==>jsp, springboot --> thymeleaf
        7.各章主要内容:
            第一章 redis的封装, 单点登录(2次md5,jsr的参数校验,全局异常处理,分布式session)
            第二章 数据库设计, 商品列表页, 详情页
            第三章 压力测试, 自定义多个用户进行压力测试, springboot打war
            第五章 页面优化 页面缓存 + url缓存 + 对象缓存, 页面静态化(前后端分离), 静态资源优化, CDN优化
            第六章 Redis减少对数据库的访问, 内存标记减少对Redis的访问, MQ, Nginx水平扩展, 压力测试
            第七章 安全优化 秒杀接口地址隐藏 + 验证码 + 接口防刷

        8.spring-boot-start-parent/web/thymeleaf 三个依赖
        9.创建springboot项目时, 用Maven创建, 而不直接创建springboot项目
        10.配置文件之thymeleaf
            spring.thymeleaf....
        11.html文件存放在resources目录下

    封装结果数据
    mybatis整合
    redis整合

第二天
    数据库设计
        id, nickname, pwd, salt, headImage, 注册时间, 上次登录时间, 登录次数

    明文密码2次MD5处理
        MD5(MD5(明文密码 + 固定salt) + 随机salt)
        前台: 防止明文密码在网络上传输(可利用彩虹表反查)
        后台: 防止数据库被盗
        依赖: commons-codes

    JSR303数据校验 + 全局异常处理器
        依赖: spring-boot-starter-validation
        使用:
            @Valid 在入参前
            在VO中定义 @NotNull @Length @IsMobile ...
            可自定义注解来数据来校验数据

    分布式session
        Token: 由UUID生成
        Redis: token:userInfo
        Cookie: token:token值

第三天
    商品表 (不可以在此表中添加秒杀字段, 因为大促/秒杀等功能, 是不是都要添加字段呢? 不利于维护)
    秒杀订单表
        状态  0新建  1已支付  2已发货   3已收货
        渠道  0PC     1Ad     2IOS
        下单时间
        支付时间
    秒杀商品表

    实际开发中价格不存储小数, 而是直接以分为单位

     springboot打包成war包的方法
        1.
