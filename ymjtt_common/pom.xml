<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>ymjtt_parent</artifactId>
        <groupId>com.ywx.ymjtt</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>                          <!-- 在这种多模块的工程开发中，打包的jar包可能并不包含第三方依赖jar -->
    <artifactId>ymjtt_common</artifactId>

    <!-- 依赖管理 -->
    <dependencies>
        <!-- logback -->                                <!-- <scope>的分类 -->
        <dependency>                                    <!-- compile: 默认值，依赖参与 编译、测试、运行，打包，强依赖 -->
            <groupId>ch.qos.logback</groupId>           <!-- test:    依赖参与编译、测试，不打包，如junit -->
            <artifactId>logback-classic</artifactId>    <!-- runtime: 依赖参与测试、运行，不参与编译，如jdbc -->
        </dependency>                                   <!-- provided:依赖参与编译、测试、运行，不打包，如servlet -->
        <!-- junit -->                                  <!-- system:  与provided类似，但依赖不从Maven仓库中拿，而是取本地的，需要配置systemPath指定依赖位置 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- plexus-utils -->       <!-- 执行shade需要此jar -->
        <dependency>
            <groupId>org.codehaus.plexus</groupId>
            <artifactId>plexus-utils</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- 在此项目中，打成可执行包，即包含第三方jar -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>2.4.3</version>
                <configuration>
                    <minimizeJar>true</minimizeJar>         <!-- 将不使用的jar，不打入jar包-->
                    <createDependencyReducedPom>false</createDependencyReducedPom>      <!-- 避免在打包时生成 dependency-reduced-pom.xml 文件 -->
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>